package atlas
package tokens

sealed trait Token extends Product {
  def raw: String
  def pos: LinePos
}

case class Reserve(raw: String)(val pos: LinePos) extends Token
case class NewLine(raw: String)(val pos: LinePos) extends Token
case class Unknown(raw: String)(val pos: LinePos) extends Token
case class Comment(raw: String)(val pos: LinePos) extends Token
case class Integer(raw: String)(val pos: LinePos) extends Token
case class NamedId(raw: String)(val pos: LinePos) extends Token
case class WhiteSp(raw: String)(val pos: LinePos) extends Token

// The tokens below are currently generated by the lexer.
// This is why, as default, their lexemes are empty.
// However, future design considerations may allow these tokens
// to accept other lexemes (e.g. brackets for Indentations).

case class Indent(raw: String = "indent")(val pos: LinePos) extends Token
case class Dedent(raw: String = "dedent")(val pos: LinePos) extends Token
case class Badent(raw: String = "badent")(val pos: LinePos) extends Token
case class EOF(raw: String = "EOF")(val pos: LinePos) extends Token
