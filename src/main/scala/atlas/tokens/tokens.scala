package atlas
package tokens

sealed trait Token extends Product {
  def raw: String
  def pos: LinePos
}

case class Reserve(raw: String)
  (implicit val pos: LinePos) extends Token

case class NewLine(raw: String)
  (implicit val pos: LinePos) extends Token

case class Unknown(raw: String)
  (implicit val pos: LinePos) extends Token

case class Comment(raw: String)
  (implicit val pos: LinePos) extends Token

case class Integer(raw: String)
  (implicit val pos: LinePos) extends Token

case class NamedId(raw: String)
  (implicit val pos: LinePos) extends Token

case class WhiteSp(raw: String)
  (implicit val pos: LinePos) extends Token

// The tokens below are currently generated by the lexer.
// This is why, as default, their lexemes are empty.
// However, future design considerations may allow these tokens
// to accept other lexemes (e.g. brackets for Indentations).

case class Indent(raw: String = "indent")
  (implicit val pos: LinePos) extends Token

case class Dedent(raw: String = "dedent")
  (implicit val pos: LinePos) extends Token

case class Badent(raw: String = "badent")
  (implicit val pos: LinePos) extends Token

case class EOF(raw: String = "EOF")
  (implicit val pos: LinePos) extends Token
