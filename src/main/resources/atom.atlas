# This is a failed attempt in making Sieve of Eratosthenes. However
# I'm proud that no memory leaks have occured!

fn main(): Unit
  println(merge_sort([Int](3, 4, 2, 1, 5)))

fn some1(): [Int]
  some()
  some()

fn some(): [Int]
  if true
    [Int]()
  else
    [Int]()

fn fibonacci(n: Int): [Int]
  let mut list = [Int](0, 1)

  for i = 2 to n
    list += list[i - 1] + list[i - 2]

  list

fn primes_sieve(limit: Int): [Int]
  if limit < 2
    [Int](1, 2)
  else
    let mut a = make_list(limit, true)
    let mut b = [Int]()
    a[0] = false
    a[1] = false

    for i = 0 to len(a)
      let is_prime = a[i]
      if is_prime
        b += i
        let init = i * i
        a[init] = false

        for j = init to limit
          let step = j + i
          a[j] = false
    b

fn make_list(n: Int, v: Boolean): [Boolean]
  let mut new_list = [Boolean]()

  for i = 0 to n
    new_list += v

  new_list


fn merge_sort(m: [Int]): [Int]
  # Base case. A list of zero or one elements is sorted, by definition.
  if len(m) <= 1
    m
  else
    # Recursive case. First, *divide* the list into equal-sized sublists.
    let mid = len(m) / 2
    let mut lhs = [Int]()
    let mut rhs = [Int]()

    for i = 0 to mid
      lhs += m[i]

    for i = mid to len(m)
      rhs += m[i]

    # Recursively sort both sublists
    lhs = merge_sort(lhs)
    rhs = merge_sort(rhs)

    merge(lhs, rhs)

fn merge(lhs: [Int], rhs: [Int]): [Int]
  let mut lhsMut = lhs
  let mut rhsMut = rhs
  let mut result = [Int]()

  while len(lhsMut) != 0 and len(rhsMut) != 0
    println(lhsMut[0])
    println(rhsMut[0])
    if lhsMut[0] <= rhsMut[0]
      result += lhsMut[0]
      lhsMut = rest(lhsMut)
    else
      result += rhsMut[0]
      rhsMut = rest(rhsMut)

  # either lhs or rhs may have elements lhs
  while len(lhsMut) != 0
    result += lhsMut[0]
    lhsMut = rest(lhsMut)

  while len(rhsMut) != 0
    result += rhsMut[0]
    rhsMut = rest(rhsMut)

  result

fn rest(list: [Int]): [Int]
  let mut newList = [Int]()
  for i = 1 to len(list)
    newList += list[i]
  newList
